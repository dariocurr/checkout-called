name: Checkout called repository
branding:
  icon: play
  color: gray-dark
description: Checkout the called repository at the same ref it was called
inputs:
  workflow:
    description: >
      The workflow reference to look for. This is **required** when multiple reusable workflows
      are called since GitHub API does not guarantee any ordering for `referenced_workflows[]`.
      This is optional when a single reusable workflow is called. The first (and only)
      workflow listed by the GitHub API is then used.
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.


      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{ github.token }}
  ssh-key:
    description: >
      SSH key used to fetch the repository. The SSH key is configured with the local
      git config, which enables your scripts to run authenticated git commands.
      The post-job step removes the SSH key.


      We recommend using a service account with the least permissions necessary.


      [Learn more about creating and using
      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
  ssh-known-hosts:
    description: >
      Known hosts in addition to the user and global host key database. The public
      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,
      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.
  ssh-strict:
    description: >
      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`
      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to
      configure additional hosts.
    default: true
  ssh-user:
    description: >
      The user to use when connecting to the remote SSH host. By default 'git' is used.
    default: git
  persist-credentials:
    description: Whether to configure the token or SSH key with the local git config
    default: true
  path:
    description: Relative path under $GITHUB_WORKSPACE to place the repository
  clean:
    description: Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
    default: true
  filter:
    description: >
      Partially clone against a given filter.
      Overrides sparse-checkout if set.
    default: null
  sparse-checkout:
    description: >
      Do a sparse checkout on given patterns.
      Each pattern should be separated with new lines.
    default: null
  sparse-checkout-cone-mode:
    description: >
      Specifies whether to use cone-mode when doing a sparse checkout.
    default: true
  fetch-depth:
    description: Number of commits to fetch. 0 indicates all history for all branches and tags.
    default: 1
  fetch-tags:
    description: Whether to fetch tags, even if fetch-depth > 0.
    default: false
  show-progress:
    description: Whether to show progress status output when fetching.
    default: true
  lfs:
    description: Whether to download Git-LFS files
    default: false
  submodules:
    description: >
      Whether to checkout submodules: `true` to checkout submodules or `recursive` to
      recursively checkout submodules.


      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are
      converted to HTTPS.
    default: false
  set-safe-directory:
    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory <path>`
    default: true
  github-server-url:
    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com
outputs:
  ref:
    description: The branch, tag or SHA that was checked out
    value: ${{ steps.checkout.outputs.ref }}
  commit:
    description: The commit SHA that was checked out
    value: ${{ steps.checkout.outputs.commit }}
runs:
  using: composite
  steps:
    - name: Get workflow reference
      id: called_repo
      shell: bash
      run: |
        # retrieve workflow run metadata calling API
        content=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ inputs.token }}" -H "X-GitHub-Api-Version: 2022-11-28" ${{ github.api_url }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }})
        if [[ -z "${{ inputs.workflow }}" ]]; then
          # if no workflow is specified, use the first referenced workflow
          data=$(echo $content | jq -r '.referenced_workflows[0]')
        else
          # if a workflow is specified, filter the referenced workflows
          data=$(echo $content | jq --arg path "${{ inputs.workflow }}" '[.referenced_workflows[] | select(.path | contains($path))] | first')
        fi
        if [ -z "$data" ]; then
          # if no referenced workflows are found, exit with an error
          echo "::error ::Unable to retrieve the workflow metadata. Please ensure that the given token has the required permissions"
          exit 1
        else
          # extract the ref and repository from the referenced workflow
          ref=$(echo $data | jq -r  '.sha')
          repository=$(echo $data | jq -r  '.path' | cut -d'/' -f1-2)
          echo "repository=$repository" >> $GITHUB_OUTPUT
          echo "ref=$ref" >> $GITHUB_OUTPUT
        fi

    - name: Checkout workflows repo
      if: steps.called_repo.outputs.ref && steps.called_repo.outputs.repository
      id: checkout
      uses: actions/checkout@v4.2.2
      with:
        ref: ${{ steps.called_repo.outputs.ref }}
        repository: ${{ steps.called_repo.outputs.repository }}
        token: ${{ inputs.token }}
        ssh-key: ${{ inputs.ssh-key }}
        ssh-known-hosts: ${{ inputs.ssh-known-hosts }}
        ssh-strict: ${{ inputs.ssh-strict }}
        ssh-user: ${{ inputs.ssh-user }}
        persist-credentials: ${{ inputs.persist-credentials }}
        path: ${{ inputs.path }}
        clean: ${{ inputs.clean }}
        filter: ${{ inputs.filter }}
        sparse-checkout: ${{ inputs.sparse-checkout }}
        sparse-checkout-cone-mode: ${{ inputs.sparse-checkout-cone-mode }}
        fetch-depth: ${{ inputs.fetch-depth }}
        fetch-tags: ${{ inputs.fetch-tags }}
        show-progress: ${{ inputs.show-progress }}
        lfs: ${{ inputs.lfs }}
        submodules: ${{ inputs.submodules }}
        set-safe-directory: ${{ inputs.set-safe-directory }}
        github-server-url: ${{ inputs.github-server-url }}
